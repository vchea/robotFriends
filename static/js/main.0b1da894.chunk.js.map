{"version":3,"sources":["component/Card.js","component/CardList.js","component/Search.js","component/Scroll.js","component/ErrorBoundary.js","action.js","api/api.js","constants.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Search","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundary","connect","searchRobots","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.0b1da894.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n\n","import React from 'react';\n\nconst Search= ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--blue bg-lightest-blue'\n        type='search'\n        placeholder='Search Robot'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default Search;\n\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n\n            hasError:false\n        } \n      }\n      componentDidCatch(error, info){\n          this.setState({hasError:true})\n\n      }\n      render(){\n          if(this.state.hasError){\n              return <h1> oops. This is not good</h1>\n          }\n          return this.props.children\n      }\n}\n\nexport default ErrorBoundry;","\nimport { apiCall } from './api/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport CardList from './component/CardList';\nimport Search from './component/Search';\nimport Scroll from './component/Scroll';\nimport ErrorBoundary from './component/ErrorBoundary';\nimport './App.css';\nimport \"tachyons\";\nimport {setSearchField, requestRobots} from \"./action\";\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <Search searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n   } from './constants';\n  \n  const initialStateSearch = {\n    searchField: ''\n  }\n  \n  export const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n      case CHANGE_SEARCHFIELD:\n        return Object.assign({}, state, {searchField: action.payload})\n      default:\n        return state\n    }\n  }\n  \n  const initialStateRobots = {\n    robots: [],\n    isPending: true\n  }\n  \n  export const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n      case REQUEST_ROBOTS_PENDING:\n        return Object.assign({}, state, {isPending: true})\n      case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state, {robots: action.payload, isPending: false})\n      case REQUEST_ROBOTS_FAILED:\n        return Object.assign({}, state, {error: action.payload})\n      default:\n        return state\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers.js';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n  <Provider store ={store}>\n     <App  />\n  </Provider>,\n   \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}